#!/usr/bin/perl
use strict;
use warnings;

use UI::Dialog;
use Term::ReadKey;
use Term::ANSIScreen qw(cls);

my $FileEditor = "/bin/nano";
my $InitDName = "/etc/init.d/minetest";
my $MINETESTDIR = "/root/minetest";
my $BackupCommand = "/root/MineBackup/minebackup.pl";

###################################################
# No changes below here
###################################################

my $MMC_ver = "1.0.0";
my $Record = "false";	# Are results saved?
my $TempDir = "/tmp";
my $RobotName = "";
my $BotVersion = "";
my $UserName = "";
my $ServerStatus = "foo";

my $d = new UI::Dialog ( backtitle => "Minetest Management Console v$MMC_ver", height => 20, width => 65, listheight => 5,
	order => [ 'ascii', 'cdialog', 'xdialog' ]);

my $windowtitle = "Welcome to the Minetest Management Console!";
my $enjoyedtitle = "We hope you enjoyed MMC!";
my $introtext =
"This is the Minetest Management Console, a utility for Minetest operators
to manage their servers from a text GUI rather than the command line.";

$d->msgbox( title => $windowtitle, text => $introtext );

if (($d->state() eq "ESC") || ($d->state() eq "CANCEL"))
{
	exit 0;
}

my $menuselection = "";

sub CheckServerStatus
{
	my $running=`ps ax|grep minetestserver|grep -v grep`;
	if ($running ne "")
	{
		$ServerStatus = "Running";
	}
	else
	{
		$ServerStatus = "Stopped";
	}

}

sub MainMenu
{
	my $WantRespawn="ON";
	CheckServerStatus();
	if (-f "$MINETESTDIR/nostart")
	{
		$WantRespawn="OFF";
	}

	$menuselection = $d->menu( title => "Main Menu", text => "Server is $ServerStatus and respawn is $WantRespawn - Select one:",
                            list => [ '1', 'Start Server',
                                      '2', 'Stop Server',
                                      '3', 'Server Console',
                                      '4', 'Turn Off Respawn',
                                      '5', 'Turn Respawn On',
                                      '6', 'Edit World Cfg',
                                      '7', 'Edit minetest.conf',
                                      '8', 'Run Backup',
                                      'q', 'Quit MMC' ] );
}

sub GetBotVersion
{
	my $SourceString = shift;
	my $SourcePos = rindex($SourceString, ':');
	my $SourceName = substr($SourceString, $SourcePos + 2);
	$SourceName = substr($SourceName, 0, length($SourceName) - 3);
	$BotVersion = $SourceName;
}
sub GetBotName
{
	my $SourceString = shift;
	my $SourcePos = rindex($SourceString, ':');
	my $SourceName = substr($SourceString, $SourcePos + 2);
	$SourceName = substr($SourceName, 0, length($SourceName) - 3);
	$RobotName = $SourceName;
}

# Reads and parses header in robot file
sub ReadBot
{
	my $RobotFile = shift;
	$RobotName = "UnknownRobot";
	$BotVersion = "???";
	open(ROBOTFH, '<', $RobotFile) or die "Unable to read robot file $RobotFile: $!";
	while(<ROBOTFH>)
	{
		chop;
		if (substr($_, 0, 11) eq "/* Version:")
		{
			GetBotVersion($_)
		}
		elsif (substr($_, 0, 11) eq "/* BotName:")
		{
			GetBotName($_)
		}
	}
	close(ROBOTFH);
}

sub ManageBots
{
	my $selectbot = $d->fselect( title => "Select Your Bot To Manage", path => "/sbbs/doors/crobots/robots/users/$UserName" );
	$selectbot =~ s/\s+/_/g;
	$selectbot =~ s/</_/g;
	$selectbot =~ s/>/_/g;

	if ($d->state() ne "OK")
	{
		$d->msgbox( title => "Selected Robot:", text => "No robot selected, aborting..." );
		return;
	}

	if (substr($selectbot, -2) ne ".r")
	{
		$d->msgbox( title => "Selected Robot:", text => "File is not a robot, aborting... To create a bot end the name with \".r\"" );
		return;
	}

	my $PathString = "/sbbs/doors/crobots/robots/users/$UserName";
	if (substr($selectbot, 0, length($PathString)) ne $PathString)
	{
		$d->msgbox( title => "Selected Robot:", text => "Can only manage robots you own, aborting..." );
		return;
	}
	# Does selection exist?
	if (! -f "$selectbot")
	{
		# no
		my $BotNamePos = rindex($selectbot, '/');
		my $BotName = substr($selectbot, $BotNamePos + 1);
		$d->msgbox( title => "Selected Robot:", text => "Robot \"$selectbot\" will be created..." );
		open(MYFH, '>', $selectbot) or die $!;
		print MYFH "/* Version: 1.0 */\n";
		print MYFH "/* BotName: $BotName */\n";
		print MYFH "/* Owner: $UserName */\n";
		close(MYFH);
	}
	system ("$FileEditor \"$selectbot\"");
}

while (-1)
{
	MainMenu();
	if (($menuselection eq "CANCEL") || ($menuselection eq "ESC") || ($menuselection eq "") || ($menuselection eq "q") || ($menuselection eq "Q"))
	{
		$d->msgbox( title => $enjoyedtitle, text => "Thanks for using MMC..." );
		exit 0;
	}
	if ($menuselection eq "1")
	{
		system("$InitDName start");
	}
	elsif ($menuselection eq "2")
	{
		if ($d->yesno( text => "Confirm stopping the server", text => "Are you sure you want to shut down the server?" ))
		{
			system("$InitDName stop");
			sleep(5);
		}
	}
	elsif ($menuselection eq "3")
	{
		$d->msgbox( text => "To exit the minetest console and return to MMC press CTRL-A CTRL-D" );
		system("screen -r");
	}
	elsif ($menuselection eq "4")
	{
		# Turn off respawn
		system("touch $MINETESTDIR/nostart");
	}
	elsif ($menuselection eq "5")
	{
		# Turn respawn back on
		if (-f "$MINETESTDIR/nostart")
		{
			unlink("$MINETESTDIR/nostart");
		}
	}
	elsif ($menuselection eq "6")
	{
		# Edit world.mt file
		system("$FileEditor $MINETESTDIR/worlds/world/world.mt");
	}
	elsif ($menuselection eq "7")
	{
		# Edit minetest.conf file
		system("$FileEditor $MINETESTDIR/minetest.conf");
	}
	elsif ($menuselection eq "8")
	{
		# Run a backup
		system("$BackupCommand");
	}
}

exit 0;
